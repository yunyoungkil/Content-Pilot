## Content Pilot PRD (제품 요구 사항 문서) - v1.1

### **1. 목표 (Goal)**

기존에 구현된 1단계 '데이터 수집 및 통합' 기능의 사용자 경험(UX)을 최적화하고, 수집된 스크랩 및 채널 데이터의 활용도를 강화하여 2단계 AI 분석 및 3단계 창작 단계로의 원활한 흐름을 준비한다.

-----

### **2. 기능 범위 (Scope)**

| ID | 유형 | 기능명 | 설명 |
| :--- | :--- | :--- | :--- |
| **G-1** | 변경/추가 | 채널 연동 방식 개선 | RSS/채널 ID 대신 일반 URL을 입력받아 자동 파싱 및 연동. |
| **G-2** | 변경 | 스크랩 실행 안정화 | 스크랩 실행을 조합 키(Ctrl/Shift + 클릭)로 변경하여 오작동 방지. |
| **G-3** | 추가 | 스크랩 메모 및 태그 | 스크랩 상세 보기에 메모 및 태그 입력 필드 추가. |
| **G-4** | 추가/변경 | 블로그 콘텐츠 지표 강화 | 블로그 콘텐츠에 성과 지표 추가 수집 및 대시보드 정렬/페이징 적용. |
| **G-5** | 추가 | 데이터 최신성 표시 | 대시보드에 채널 데이터의 마지막 업데이트 시간 표시 및 강제 업데이트 기능 제공. |
| **G-6** | **추가** | **AI 기반 키워드 추출** | 수집된 모든 콘텐츠(스크랩, 블로그, 유튜브)의 본문 또는 제목을 AI(Gemini)에 보내 핵심 키워드를 텍스트 배열 형태로 추출한다. |
| **G-7** | **추가** | **키워드 태그 저장** | 추출된 키워드 배열을 Firebase Realtime Database의 각 콘텐츠 데이터에 `tags` 필드로 저장한다. |
| **G-8** | **변경** | **스크랩북/대시보드 UI 개선** | 스크랩북과 대시보드의 각 콘텐츠 카드에 저장된 `tags`를 시각적으로 표시하여 사용자가 핵심 내용을 빠르게 인지할 수 있도록 한다. |
| **G-9** | **추가** | **태그 기반 필터링 (고급)** | (선택 사항) 스크랩북 또는 대시보드 상단에 주요 태그를 모아 보여주고, 클릭 시 해당 태그가 포함된 콘텐츠만 필터링하는 기능을 제공한다. |
| **G-10**| **추가**| **중복 추출 방지**| 데이터 수집 시, 이미 키워드 태그(`tags`)가 존재하는 콘텐츠에 대해서는 AI API를 다시 호출하지 않도록 방어 로직을 추가한다. |
| **G-11**| **추가**| **사용자 제어 기능**| 사용자가 'AI 키워드 자동 추출' 기능을 켜고 끌 수 있는 설정 옵션을 제공하여 API 사용 여부를 직접 제어할 수 있도록 한다. |
| **G-12**| **추가**| **일괄 처리 (Batch Processing)**| 한 번의 API 호출에 여러 콘텐츠의 텍스트를 담아 보내, 다수의 키워드 결과를 한 번에 받아오는 방식으로 API 호출 횟수를 줄인다. |

-----

### **3. 상세 기능 요구 사항 (Detailed Requirements)**

| ID | 요구 사항 | 세부 내용 (A/C: 인수 조건) | 관련 파일 |
| :--- | :--- | :--- | :--- |
| **G-1** | 채널 연동 방식 개선 | **A/C-1 (블로그):** 사용자가 일반 블로그 URL (https://...)을 입력하면, `background.js`가 해당 URL에서 RSS 주소를 자동으로 추출하여 연동한다.<br>**A/C-2 (유튜브):** 사용자가 유튜브 채널 URL ([의심스러운 링크 삭제됨]을) 입력하면, `background.js`가 URL에서 채널 ID를 추출하여 연동한다. | `js/ui/channelMode.js`, `background.js` |
| **G-2** | 스크랩 실행 안정화 | **A/C-1 (실행 조건 변경):** 스크랩 모드(`highlightToggleState: true`)가 활성화된 상태에서, 사용자가 웹 요소를 `event.ctrlKey` 또는 `event.shiftKey`를 누른 채 클릭했을 때만 스크랩이 실행된다.<br>**A/C-2 (기존 동작 방지):** 조합 키 없이 일반 클릭만 발생하면, 하이라이트만 유지하고 스크랩 실행은 방지해야 한다. | `js/core/highlighter.js` |
| **G-3** | 스크랩 메모 및 태그 | **A/C-1 (UI):** `js/ui/scrapbookMode.js`의 상세 보기 화면에 메모를 위한 `textarea` 필드와 태그를 위한 `input` 필드를 추가한다.<br>**A/C-2 (저장):** 사용자가 입력한 메모와 태그를 Firebase Realtime Database의 해당 스크랩에 업데이트한다. | `background.js`, `js/ui/scrapbookMode.js` |
| **G-4** | 블로그 콘텐츠 지표 강화 | **A/C-1 (지표 수집):** `background.js`의 `fetchRssFeed` 로직에 댓글 수나 조회수 같은 성과 지표를 추가로 추출하는 로직을 구현한다.<br>**A/C-2 (대시보드 적용):** `js/ui/dashboardMode.js`에서 블로그 콘텐츠에도 수집된 지표를 기준으로 정렬 및 페이징 기능을 적용해야 한다. | `background.js`, `js/ui/dashboardMode.js` |
| **G-5** | 데이터 최신성 표시 | **A/C-1 (표시):** `js/ui/dashboardMode.js`의 대시보드 각 채널 목록 상단에 `fetchedAt` 필드를 활용하여 **"마지막 업데이트: X분 전"** 형식으로 표시한다.<br>**A/C-2 (강제 업데이트):** 표시된 시간 옆에 '새로고침' 버튼을 추가하며, 클릭 시 `background.js`의 `fetchAllChannelData` 함수를 즉시 실행하도록 요청한다. | `js/ui/dashboardMode.js`, `background.js` |
| **G-6** | **AI 기반 키워드 추출** | **A/C-1 (추출 로직):** `background.js`에 `extractKeywords(text)` 함수를 추가하여, Gemini API로 텍스트의 핵심 키워드를 3\~5개 추출하여 JavaScript 배열 형태로 반환한다.<br>**A/C-2 (프롬프트 설계):** Gemini API 프롬프트는 "다음 텍스트에서 가장 중요한 핵심 키워드를 5개만 추출해서, 다른 설명 없이 JavaScript 배열 형식으로만 응답해 줘."와 같이 명확해야 한다. | `background.js` |
| **G-7** | **키워드 태그 저장** | **A/C-1 (스크랩):** 스크랩 저장 시 `extractKeywords`를 호출하여 `tags` 필드를 함께 저장한다.<br>**A/C-2 (콘텐츠 수집):** `fetchRssFeed`, `fetchYoutubeChannel` 실행 시 `cleanText`나 `description`으로 키워드를 추출하여 `tags` 필드를 함께 저장한다. | `background.js` |
| **G-8** | **UI 개선** | **A/C-1 (스크랩북):** `js/ui/scrapbookMode.js`의 카드에 `scrap.tags`를 순회하며 태그 UI를 표시한다.<br>**A/C-2 (대시보드):** `js/ui/dashboardMode.js`의 콘텐츠 카드에 `item.tags`를 활용하여 태그를 표시한다. | `js/ui/scrapbookMode.js`, `js/ui/dashboardMode.js`, `css/style.css` |
| **G-10**| **중복 추출 방지** | **A/C-1 (중복 체크):** 키워드 추출 API 호출 전, Firebase에 해당 데이터의 `tags` 필드가 이미 존재하는지 확인하고, 존재하면 API 호출을 건너뛴다. | `background.js` |
| **G-11**| **사용자 제어 기능** | **A/C-1 (UI):** `js/ui/channelMode.js`에 "AI 키워드 자동 추출 활성화" 체크박스를 추가한다.<br>**A/C-2 (상태 저장):** 설정 상태를 `chrome.storage.local`에 저장한다.<br>**A/C-3 (로직 분기):** `background.js`에서 키워드 추출 시, 저장된 설정값이 `true`일 경우에만 API를 호출한다. | `js/ui/channelMode.js`, `background.js` |
| **G-12**| **일괄 처리** | **A/C-1 (구현):** `fetchRssFeed`, `fetchYoutubeChannel`에서 키워드 추출이 필요한 항목들을 모아 하나의 프롬프트로 구성하여 **단일 API 호출**로 처리한다. | `background.js` |

-----

### **4. 사용자 행동 패턴 (User Flow)**

G-1 (채널 연동 방식 개선)과 G-6 (AI 키워드 추출) 기능이 적용된 후의 사용자 행동 패턴입니다.

| 단계 | 사용자 행동 | 프로그램 반응 (개선된 로직) |
| :--- | :--- | :--- |
| **1단계: 패널 열기** | Content Pilot 패널을 열고 '채널 연동' 탭으로 이동합니다. | - |
| **2단계: 입력 필드 추가** | '경쟁 채널' 섹션에서 플랫폼에 맞는 "블로그 추가" 또는 "유튜브 추가" 버튼을 클릭합니다. | 해당 채널 유형의 입력 필드가 UI에 추가됩니다. |
| **3단계: 일반 URL 입력** | 웹에서 찾은 경쟁 채널의 일반 URL을 새로 추가된 입력 필드에 수동으로 붙여넣기 합니다 (예: `https://blog.naver.com/myblog` 또는 `https://www.youtube.com/@competitor`). | - |
| **4단계: 정보 저장 요청** | 페이지 하단의 "연동 정보 및 API 키 저장" 버튼을 클릭합니다. | `background.js`가 입력된 일반 URL을 파싱하여 실제 RSS 주소 또는 채널 ID를 추출하고, Firebase에 저장합니다. 이후 **주기적 데이터 수집(Alarm)을 즉시 실행**합니다. |
| **5단계: 데이터 자동 분석 및 태깅** | (사용자는 기다리기만 하면 됩니다.) | 시스템은 백그라운드에서 새로 수집된 콘텐츠(블로그, 유튜브)의 본문과 설명을 **AI로 자동 분석하여 핵심 키워드를 추출**하고, 각 콘텐츠에 **`#태그` 형태로 저장**합니다. |
| **6단계: 데이터 및 태그 확인** | '대시보드' 탭으로 이동합니다. | 새로 연동된 경쟁 채널의 콘텐츠 목록이 '경쟁사 주요 콘텐츠' 영역에 표시됩니다. 각 콘텐츠 카드에는 **AI가 추출한 키워드 태그가 함께 표시되어** 콘텐츠의 핵심 주제를 한눈에 파악할 수 있습니다. |
| **7단계: AI 분석 요청** | '경쟁사 주요 콘텐츠'와 '내 주요 콘텐츠'에서 각각 분석할 채널을 선택한 후, "경쟁 비교 분석" 버튼을 클릭하여 AI 아이디어를 요청합니다. | - |

---

### **🔁 핵심: 완전 자동화된 데이터 인사이트**

개선된 기능의 핵심은 사용자의 최소한의 입력(3단계: 일반 URL 제공) 이후부터 **데이터 확인(6단계)**까지의 모든 과정이 시스템 내부적으로 **완전 자동화**된다는 점입니다. 사용자는 복잡한 정보(RSS, 채널 ID)를 찾을 필요도, 콘텐츠를 일일이 읽어볼 필요도 없이, 자동으로 수집되고 **주제별로 태깅까지 완료된** 데이터를 즉시 활용하여 전략을 수립할 수 있습니다.